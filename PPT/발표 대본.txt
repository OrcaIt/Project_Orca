안녕하십니까 여러분, 팀 Orca의 발표를 맡게 된 김현빈입니다.
저희 팀은 AWS 콘솔을 이용한 서비스 구현을 주제로 프로젝트를 진행하였습니다.
 
먼저 발표 목차 간단히 보시고 넘어가겠습니다.
발표는 다음과 같이 진행됩니다.
 
프로젝트 주제에 대해서 간략히 알아보고, 구현 내용의 이해를 돕기 위한 설명을 거친 후
추후 방향성에 대해 이야기하는 것으로 마무리하겠습니다.
 
앞서 말씀드렸듯, 저희는 AWS 콘솔을 이용한 서비스 구현에 중점을 두었습니다.
그래서 해당 주제로 어떤 서비스를 구현해 볼지에 관하여 회의를 진행한 결과
AWS S3를 이용한 클라우드 스토리지 서비스를 구현으로 의견이 모였습니다.
그에 따라 회원 가입을 통해 인가된 사용자에 한하여 S3 버킷에 파일 업로드 및 업로드된 파일 다운로드가 가능하도록하고 , 그것을 웹 환경에서 이용 가능하게 하는 것을 최종 목표로 프로젝트를 진행하게 되었습니다.
 
이어서 개발단계에서 사용했던 주요 AWS 툴에 대해 말씀드리겠습니다.
 
우선, 웹 서버를 담당할 EC2, 웹 개발에 이용할 React, 사용자 인증을 위한 Cognito, 마지막으로 백엔드 기능 및 회원가입을 위한 UI를 제공해주는 Amplify까지
총 네 가지 도구를 중심으로 구현이 이뤄졌습니다.
 
다음은 저희 프로젝트의 진행 스토리에 대해 이야기 해볼까 합니다.
 
처음 시작은 S3 클라우드 스토리지 서비스를 AWS 3티어 아키텍쳐로 구현하는 것을 목표로
프로젝트를 시작하였습니다.
 
3티어 아키텍쳐에 대해 간단히 말씀드리자면 사용자 인터페이스, 비즈니스 로직, 데이터베이스의 3가지 계층이 각각 다른 플랫폼 상에서 물리적으로 독립되어 구동하는 구조입니다.
 
해당 구조로 서비스를 구축하게 되면 각 계층을 담당하는 팀을 구성하여 업무 분담을 통한
업무 효율 증진과 이중화 또는 백업 구성을 통한 리스크 완화라는 장점이 있고,
각 계층이 여러 대의 서버로 나누어져 동작하므로 서버의 부하를 줄여줄 수도 있습니다.
 
초기 3티어 아키텍쳐 기반의 구성도입니다.
 
보시는 것과 같이 하나의 VPC안에 2개의 리젼을 생성하여 Public 서브넷에 Bastion 호스트를 두고 Private 서브넷에 존재하는 웹 서버에 접근할 수 있게 끔 설계하였고, 웹 서버는 WAS 서버와 통신이 가능하도록, WAS 서버는 DB의 데이터를 Web으로 전달해주는 기능을 담당했습니다.
 
두 개의 리젼을 사용한 이유는 로드 밸런싱을 통해 하나의 리젼이 다운되더라도
다른 리젼을 통하여 사이트가 정상 작동하게끔 구축하기 위함입니다.
 
이런 3티어 아키텍쳐 구현 대신 AWS Amplify를 사용하게 된 이유를 설명 드려야 할 것 같습니다.
 
AWS Amplify란 프론트엔드 및 모바일 개발자가 AWS의 풀 스택 애플리케이션을 쉽고 빠르게
구축할 수 있도록 지원하는 도구들의 집합으로
AWS CLI 명령을 통해 다양한 백엔드 기능들을 사용할 수 있게 해줍니다.
 
띠라사 3티어 아키텍처로 구현하는 것보다 Amplify를 사용하는 것이 비용적인 측면과
편의성 그리고 기술적으로도 다양한 이점이 존재했기 때문에 해당 서비스를 이용하기로
결정하게 되었습니다.
 
Amplify 서비스를 사용함으로써 WAS와 DB에서 처리할 회원 정보나 바이너리 파일을 불러오는 작업을 Coginto와 Amplify Storage 서비스를 이용하여 구현할 수 있었습니다.
 
이것이 변경된 구성도입니다. Amplify를 이용함으로써 비용이 많이 들어가는 DB와 Nat게이트웨이, WAS 서버를 없애면서 같은 서비스를 구현하면서도 비용을 크게 절약할 수 있었고
회원가입과 로그인을 위한 서비스 또한 Amplify를 Cognito의 사용자 풀과 연동하여 원활하게 진행할 수 있었습니다. 
이러한 이유들로 저희는 Amplify로 작업을 진행하게 되었습니다.
 
일련의 과정들을 통해 저희는 서비스를 구현하였고 Web을 구현한 것에 그치지 않고 도메인을 구매하여 인증서를 발급받아 암호화된 https 프로토콜로 통신하도록 하였습니다.
웹 UI는 리액트 컴포넌트 형식의 앱/웹 형식으로 작업하였는데, 로그아웃을 제외하고 
페이지를 이동할 때 리프레쉬가 발생하지 않는다는 특징이 있습니다.
또한 반응형 웹으로 작성하여 모바일과 PC환경 모두 각각 적절한 UI가 보여지게끔 설계하였습니다. 

사용자는 이메일인증을 통한 회원가입을 진행하고 회원 가입한 사용자 정보는 Cognito 사용자 풀에 저장됩니다.
S3 버킷에는 로그인한 사용자만이 접근 가능한 저장공간이 생성되어 파일 업로드와 다운로드 및 삭제가 가능합니다.
 
자세한 과정은 시연 영상통해 보여드리도록 하겠습니다.
 
----------시연 영상----------
 
시청해주셔서 감사합니다.
 
마지막으로 향후 개선 및 추가 작업 사항에 대해 말씀드리면서 발표를 마치도록 하겠습니다.
 
개선 사항으로는 
우선, 사용자 별로 사용된 저장공간의 용량을 표시하고 파일 다운로드와 삭제뿐만 아니라 파일 정보에 접근이 가능하게 하는 것이 있고
추가로 사용자의 멤버쉽 가입을 통한 등급을 나누어 사용 가능한 저장 용량에 차이를 두는 것도 구현해보는 것이 목표입니다.
 
이상으로 발표를 마치겠습니다. 감사합니다.

