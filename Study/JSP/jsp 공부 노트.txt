JSP 정리

<% %> : JSP > JAVA 문 삽입 script
<%!  : 선언문 ( 함수 등등)
<%@  : 페이지 설정 문
<%=   : 값반환
<%--   : 주석 >> jsp 주석은 <!-- html 주석 보다 보안상 더 뛰어나다
           jsp 실행을위해 컴파일 경로를 거치는 중 java 파일로 변환된 
           코드 들을 둘러보면 jsp 주석처리된 부분은 컴파일 하지 않는다

>> 출력함수
out.print(); 
out.write();

>> 변수
    String : 문자열
         Ex) String uid = request.getParameter("userid");
              out print(uid);

>> JSP 지시어
    page : <% page ...%>   || JSP 페이지 처리 방법
    include : <% include ...%>  || JSP 페잊에 다른 문서를 포함시킴
    taglib : <% taglib ...%>  ||  JSP 페이지에서 이용될 태그 라이브러리를 설정


[ page 지시어 ]     
        >> Encoding 
  ** GET 방식은 
  <%@ page  pageEncoding="utf-8"%> 만 해줘도 상관이 없음
  ** POST 방식
  <% request.setCharacterEncoding("utf-8");
  
        >> import
  || import속성은 JSP 페이지에서 사용할 Java Class 정의 하는데 이용됨
  || JSP에서 데이터베이스 연결, Util 패키지의 클래스를 이용하여 프로그래밍을 하고자 할 때 필수적

[ include 지시어 ]
    >> file
  다른 파일을 불러와 작업 파일에 같이 작업한다.
    !!! 주의 사항 : 두 파일간에 이름이 같은 변수가 있어서는 안 됨!! 


** JSP 선언문 <%! 
 >> 함수, 변수 선언 
 Ex. 
<%! String getDate() {
         return (new Date()).toString();
         }
%>


** JSP 표현식 <%=
 >> 함수, 변수 호출




-------------------------------
<참고 사항>
Tomcat 오류는 web.xml 파일에 절대 경로를 설정해주어야 하는듯 함



////////////////////////////////////////////////////////////////////////////////////
** 객체의 종류

     * Request 객체
  getParameter(String name) : 문자열 반환 || 요청파라미터 리스트에서 이름이 name인
                                      파라미터값 반환
  getParameterValues(String name): 문자열 배열 || 파라미터 값이 여러개일 경우
                                                              해당 값들을 배열 형태로 반환
  getParameterNames() :: 파라미터 리스트에서 이름에 해당하는 부분만 Enumeration
                                  형식으로 반환
  getParameterMap() : 전체 파라미터 리스트를 Map 객체 형식으로 반환


  getHeader(String name) : 문자열 반환 || 요청 헤더 중 name의 속성값 반환
  getHeaderNames()  : 요청 메시지 헤더의 포함된 모든 속성의 이름을 가져옴
                              java.util.Enumeration 반환
  getCookies(): 모든 쿠키 값을 가져옴


     * Response 응답
  setContentType(String type) : 반환 없음 void || 
                                HTTP응답을 통해 반환될 페이지의 유형을 나타내는 MIME타입을
                                설정
  setCharacterEncoding(String charset) 
                 반환될 페이지의 문자 인코딩 방식을 지정함
  setHeader(String name, String value)
                 이름이 name인 헤더 속성에 문자열 값 value를 설정
  setHeader(String name, int value)
                 이름이 name인 헤더 속성에  정수 값 value를 설정
  setStatus(int code) 
                   HTTP 응답코드를 설정함
  addCookie(Cookie cookie)
               HTTP 응답에 쿠키 정보를 추가 함
  sendRedirect(String url) 
               지정된 url로 강제 이동        ************ 제일 많이 쓰임

     * out 객체
  print(String str)     void 반환
           주어진 str 값을 HTTP 응답 메시지의 바디 부분에 추가
  getBufferSize()       int 반환
           출력 버퍼에서 현재 할당된 크기를 가져옴
  getRemaining()      int 반환
           출력 버퍼에서 현재 가용한 크기를 가져옴
  clearBuffer()       void 반환
           출력 버퍼의 내용을 비움
  flush()              void 반환
           출력 버퍼의 내용을 브라우저로 전송
  isAutoFlush()      Boolean 반환
           page 지시어를 통해 설정된 autoFlush 필드 값을 가져 옴


            >> out.print(str);    ==  <%= res %>
  !! 참고사항
    out.print 와 out.println 의 차이점 *****
       out.print는 그냥 출력만 하고 println = print() + newLine(); 인데
       newLine()함수는 줄을 바꿔주지만 println은 한 칸 띄워주기만 한다.



        * Application 객체
  setAttribute(String name, Object value)     void 반환
         name속성의 값을 value로 지정함
  getAttribute(String name)         Object 반환
         name 속성 값을 가져 옴
  removeAttribute(String name)     void 반환
         name속성 값을 삭제
  getAttrubteNames()         java.util.Enumeration  반환
         모든 name 속성 이름을 가져 옴
  getRealPath(String url)           문자열 반환
          주어진 url에 대한 실제 시스템(개발 컴퓨터) 상의 절대 경로를 가져 옴
  

     >>> 상위 4개의 함수는 서비스 실행 기간 동안 유지될 필요가 있는
          이름 - 값  쌍( name - value  pair) 형태의 속성들을 정의하고 관리하기 위한 함수
        >> 내부적으로 HashMap을 이용해서 관리
       >> getRealPath() 함수는 업로드된 파일이나 이미지를 저장하고자 할 때,
          서버가 동작하는 시스템의 절대 경로를 알아내기 위해 주로 이용됨.
       >> visitcount.jsp 파일을 참조 할 것! 

    * Session 객체
  setAttribute(String name, Object value)     void 반환
      name 속성의 값을 value로 지정
  getAttribute(String name)        Object   반환
      name 속성 값을 가져옵니다.
  removeAttribute(String name)                 void 반환
      name 속성 값을 삭제
  getAttributeNames()            java.util.Enumeratrion
      모든 name 속성 이름을 가져 옴
  setMaxInactiveInterval(int sec)       void 반환
      세션 유지 시간을 초 단위로 설정
  invalidate()                void
       세션 정보를 삭제
    
      >> 상위 4개의 함수는 application 객체에서 제공되는 함수와 동일한 방법으로
           이용됨. Application 에서는 내부적으로 서비스 별로 하나의 HashMap을 이용
           하여 속성들을 관리하는 반면, session 에서는 클라이언트 별로 HashMap을 유지
           setMaxInactiveInterval() 함수는 세션 유지 시간을 초 단위로 설정,
           일정 시간이 지나면 수행되어야 하는 자동 로그아웃 기능의 구현에 이용 가능
	invalidate() 함수는 클라이언트 별 세션 정보를 삭제함으로써, 사용자가 
             로그아웃 기능을 호출 할 때 이용할 수 있음

      !!! session.setAttribute 를 잘 써야함
  Ex) 로그인 정보 입력창에 id 를 입력하면
     login을 확인하기 위한 페이지로 넘기고 그 페이지에서
     String uid = request.getParameter("userid");
     uid 설정을 해주고   다음 메인 페이지로 넘겨주기 전에 session객체로 세션을 
     설정, response객체로 메인 페이지로 넘겨줄 코드 작성하면
      session.setAttribute("id", uid);
      reponse.sendRedirect("main.jsp");           해당 코드의 모든 파일들은 예시임!

	* JSP & Data Base
  Class.forName();     >>> Java 와 다른 프로그램, 라이브러리 함수들을 사용하기 위해
                                 드라이버를 메모리에 올리기위한 클래스 파라미터 전달 역할
  
  getConnection  
        >String url           접속할 서비스 주소
        > String user        서비스 사용자 이름
        > String password  서비스 사용자의 패스워드   ( 여기서는 MySQL 이 서비스 )
    Ex) jdbc:mysql://localhost:3306/mysns
  1. 프로토콜 (jdbc.mysql) 
  2. ip_addr:port ( localhost:3306)
  3. /dbname (/mysns)
                  >> DriverManager.getConnection("jdbc:mysql://192.168.0.11:3306/mysns",
                                                             "root", "password!");
  
  (( 쿼리 실행 문 ))
  Statement stmt = conn.createStatement();
            >> DriverManager 클래스로 부터 Connection 객체가 생성되면 
             SQL 문을 데이터베이스로 전송하기 위해 Connection 객체의 createStatement()
             함수를 이용한다. 

  executeUpdate(String sql)        Int 반환
        INSERT, DELETE, UPDATE 문을 실행하기 위한 함수,
        실행 결과를 변경된 레코드의 수로 반환
  executeQuery(String SQL)        java.sql.ResultSet 반환
        SELECT 문을 실행하기 위한 함수, 실행 결과로 얻어진 테이블 형태
     Ex) ResultSet rs = stmt.executeQuery("SELECT id, password, FROM user");

     !!!!!마지막에 쓰고 나서는 다 닫아준다
      Ex) rs.close();    stmt.close();   conn.clpse();









     *ResultSet Class 객체
  next()      Boolean 반환
        현재 레코드를 가리크는 커서를 다음 레코드로 이동 시킴
        다음 레코드가 존재하여 이동에 성공한 경우 TRUE,
        그렇지 않은 경우 FLASE 반환
  getString(String Column)      String 반환
        커서가 가리키는 레코드 내 파라미터로 주어진 column 값을 String 타입으로 반환
  getInt(String column)           Int 반환
        커서가 가리키는 레코드 내 파라미터로 주어진 column 값을 int 타입으로 반환
  first()                               boolean 반환
        커서를 첫 번째 레코드로 이동 시킴
  last()                               boolean 반환
         커서를 마지막 레코드로 이동 시킴



      










































